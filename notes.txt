Selection sort
input {6 2 3 4 3}
i = 0;
minIn = i;
j = 0;
if input[minIn]6 > input[j]6  false
    minIN = j;
i = 0;
minIn = 0;
j = 1
if input[minIn]6 > input[j]2  True
    minIN = j;
i = 0;
minIn = 1
j = 2
if input[minIn]2 > input[j]3  False
    minIN = j;
i = 0
minIn = 1
j = 3
if input[minIn]2 > input[j]4  False
    minIN = j;
i = 0
minIN = 1
j = 4
if input[minIn]2 > input[j]3  False
    minIN = j;
swap (input, i, minIn)
after swap input {2 6 3 4 3}
----------------------------------------------

Insertion Sort
input {6 2 3 4 3}
i = 1
j = 0
if (input[i]2 < input[j]6)
    swap(input,1,0)
J loop end

input {2 6 3 4 3}
i = 2
j = 1
if (input[i]3 < input[j]6)
    swap(input,2,1)
j--

input {2 3 6 4 3}
i = 2
j = 0
if (input[i]3 < input[j]6)
    swap(input,2,0)
J loop end

input {2 3 6 4 3}
i = 3
j = 2
if (input[i]4 < input[j]6)
    swap(input,3,2)
    j--

input {2 3 4 6 3}
// skipping steps till and now starting with i = 4

i = 4
j = 3
if (input[i]3 < input[j]6)
    swap(input,3,2)
    j--

input{2 3 4 3 6}
i = 4
j = 2
if (input[i]6 < input[j]4)
    swap(input,3,2)
    j--

    --------------------
1 2 3 4 5 6
k = 2

head = 1
oldHead = 1
mid = 4
oldLast = 6

5 6 1 2 3 4 - expected

oldLast.next = head
head = mid.next
mid.next = null


